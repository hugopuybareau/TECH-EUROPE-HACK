{
  "name": "Repo â†’ Template Generator (HTTP + Retry + Error Handling)",
  "nodes": [
    {
      "parameters": {
        "path": "repo-scan",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {
          "responseData": ""
        }
      },
      "id": "Webhook_Trigger",
      "name": "Webhook: Repo Scan Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "const p = $json;\n// Normalize and expose fields we need downstream\nreturn [{\n  scan_id: p.scan_id,\n  repo_id: p.repo_id,\n  provider: p.provider,\n  org: p.org,\n  name: p.name,\n  default_branch: p.default_branch,\n  repo_url: p.repo_url,\n  repo_dir: `${$env.REPO_BASE_DIR || '/tmp'}/repo_${p.scan_id}`\n}];"
      },
      "id": "Set_Context",
      "name": "Set: Context Vars",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "command": "set -euo pipefail\nrm -rf \"{{$json.repo_dir}}\" && mkdir -p \"{{$json.repo_dir}}\"\nGIT_SSH_COMMAND=\"ssh -o StrictHostKeyChecking=no\" git clone --depth 1 \"{{$json.repo_url}}\" \"{{$json.repo_dir}}\"",
        "options": {}
      },
      "id": "Clone_Repo",
      "name": "Clone Repo (shallow)",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [740, 300]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.exitCode}}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "id": "IF_Clone_Ok",
      "name": "IF: Clone OK?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [980, 300]
    },
    {
      "parameters": {
        "command": "set -euo pipefail\n# Limit traversal depth and collect common project files\nTREE_OUT=\"{{$json.repo_dir}}/.scan_tree.txt\"\nINFO_OUT=\"{{$json.repo_dir}}/.scan_info.txt\"\n\n( command -v tree >/dev/null 2>&1 && tree -L 3 -a \"{{$json.repo_dir}}\" || find \"{{$json.repo_dir}}\" -maxdepth 3 -print ) | head -n 2000 > \"$TREE_OUT\"\n\n# Grab hints from common files if present\nFILES=$(find \"{{$json.repo_dir}}\" -maxdepth 2 -type f \\( -name 'package.json' -o -name 'pnpm-lock.yaml' -o -name 'yarn.lock' -o -name 'package-lock.json' -o -name 'pyproject.toml' -o -name 'requirements.txt' -o -name 'Pipfile' -o -name 'Pipfile.lock' -o -name 'Makefile' -o -name 'Dockerfile' -o -name 'README.md' -o -name 'vite.config.*' -o -name 'next.config.*' -o -name 'uvicorn.*' -o -name 'pyproject.toml' \\) 2>/dev/null | head -n 20 )\n: > \"$INFO_OUT\"\nfor f in $FILES; do\n  echo \"===== FILE: $f =====\" >> \"$INFO_OUT\"\n  head -n 200 \"$f\" >> \"$INFO_OUT\" || true\n  echo \"\\n\" >> \"$INFO_OUT\"\ndone\n\ncat \"$TREE_OUT\"; echo \"\\n===== SELECTED FILE CONTENTS =====\\n\"; cat \"$INFO_OUT\";"
      },
      "id": "Extract_Info",
      "name": "Extract Repo Info",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1240, 240]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "ignoreResponseCode": true
        },
        "jsonParameters": true,
        "responseFormat": "json",
        "headerParametersJson": "={\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{$env.OPENAI_API_KEY}}\"\n}",
        "bodyParametersJson": "={\n  \"model\": \"{{$env.OPENAI_MODEL || 'gpt-4o-mini'}}\",\n  \"temperature\": 0.2,\n  \"messages\": [\n    {\"role\": \"system\", \"content\": \"You are a repository analyst who summarizes onboarding details clearly and concisely in Markdown.\"},\n    {\"role\": \"user\", \"content\": \"Analyze the repository info and produce a concise Markdown summary focused on: languages/frameworks, package manager, install commands, how to run the app, and where docs live (e.g. /docs).\\n\\nREPO STRUCTURE + HINTS:\\n\\n\" + $json[\"stdout\"] }\n  ]\n}"
      },
      "id": "HTTP_OAI_Summarize_Attempt1",
      "name": "OpenAI Summarize (Attempt 1)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1500, 160]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.statusCode}}",
              "operation": "smaller",
              "value2": 300
            }
          ]
        }
      },
      "id": "IF_Summarize_200_A1",
      "name": "IF: Summarize < 300 ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1760, 160]
    },
    {
      "parameters": {
        "functionCode": "const waitMs = 1500; // small backoff\nreturn new Promise(resolve => setTimeout(() => resolve([{}]), waitMs));"
      },
      "id": "Backoff1",
      "name": "Backoff 1.5s",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1500, 320]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "ignoreResponseCode": true
        },
        "jsonParameters": true,
        "responseFormat": "json",
        "headerParametersJson": "={\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{$env.OPENAI_API_KEY}}\"\n}",
        "bodyParametersJson": "={\n  \"model\": \"{{$env.OPENAI_MODEL || 'gpt-4o-mini'}}\",\n  \"temperature\": 0.2,\n  \"messages\": [\n    {\"role\": \"system\", \"content\": \"You are a repository analyst who summarizes onboarding details clearly and concisely in Markdown.\"},\n    {\"role\": \"user\", \"content\": \"Analyze the repository info and produce a concise Markdown summary focused on: languages/frameworks, package manager, install commands, how to run the app, and where docs live (e.g. /docs).\\n\\nREPO STRUCTURE + HINTS (RETRY):\\n\\n\" + $json[\"stdout\"] }\n  ]\n}"
      },
      "id": "HTTP_OAI_Summarize_Attempt2",
      "name": "OpenAI Summarize (Attempt 2)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1760, 320]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.statusCode}}",
              "operation": "smaller",
              "value2": 300
            }
          ]
        }
      },
      "id": "IF_Summarize_200_A2",
      "name": "IF: Summarize < 300 ? (A2)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2020, 320]
    },
    {
      "parameters": {
        "functionCode": "const res = items[0].json;\ntry {\n  const txt = res.body.choices[0].message.content;\n  return [{ summary_markdown: txt }];\n} catch (e) {\n  return [{ parse_error: String(e), raw: res }];\n}"
      },
      "id": "Extract_Summary",
      "name": "Extract Summary Markdown",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2020, 160]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "ignoreResponseCode": true
        },
        "jsonParameters": true,
        "responseFormat": "json",
        "headerParametersJson": "={\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{$env.OPENAI_API_KEY}}\"\n}",
        "bodyParametersJson": "={\n  \"model\": \"{{$env.OPENAI_MODEL || 'gpt-4o-mini'}}\",\n  \"temperature\": 0,\n  \"messages\": [\n    {\"role\": \"system\", \"content\": \"You generate deterministic onboarding template parts for developers.\"},\n    {\"role\": \"user\", \"content\": \"Based on the following markdown summary, produce exactly 4 JSON objects representing onboarding template parts:\\n\\n1. IDE Setup & Extensions\\n2. Clone Repository\\n3. Install Dependencies\\n4. First Run & Documentation Access\\n\\nEach object must contain:\\n- title (string)\\n- description (string)\\n- role_key (string = 'developer')\\n- tags (array of strings)\\n- fields (array of { name, label, type })\\n- validators (array, can be empty)\\n\\nReturn *only* a valid JSON array (no markdown).\\n\\nMarkdown summary:\\n\\n\" + $json[\"summary_markdown\"] }\n  ]\n}"
      },
      "id": "HTTP_OAI_Parts_Attempt1",
      "name": "OpenAI Parts (Attempt 1)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2280, 160]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.statusCode}}",
              "operation": "smaller",
              "value2": 300
            }
          ]
        }
      },
      "id": "IF_Parts_200_A1",
      "name": "IF: Parts < 300 ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2540, 160]
    },
    {
      "parameters": {
        "functionCode": "const waitMs = 1500; return new Promise(r => setTimeout(() => r([{}]), waitMs));"
      },
      "id": "Backoff2",
      "name": "Backoff 1.5s (Parts)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2280, 320]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "ignoreResponseCode": true
        },
        "jsonParameters": true,
        "responseFormat": "json",
        "headerParametersJson": "={\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{$env.OPENAI_API_KEY}}\"\n}",
        "bodyParametersJson": "={\n  \"model\": \"{{$env.OPENAI_MODEL || 'gpt-4o-mini'}}\",\n  \"temperature\": 0,\n  \"messages\": [\n    {\"role\": \"system\", \"content\": \"You generate deterministic onboarding template parts for developers.\"},\n    {\"role\": \"user\", \"content\": \"Based on the following markdown summary, produce exactly 4 JSON objects representing onboarding template parts:\\n\\n1. IDE Setup & Extensions\\n2. Clone Repository\\n3. Install Dependencies\\n4. First Run & Documentation Access\\n\\nEach object must contain:\\n- title (string)\\n- description (string)\\n- role_key (string = 'developer')\\n- tags (array of strings)\\n- fields (array of { name, label, type })\\n- validators (array, can be empty)\\n\\nReturn *only* a valid JSON array (no markdown).\\n\\nMarkdown summary (RETRY):\\n\\n\" + $json[\"summary_markdown\"] }\n  ]\n}"
      },
      "id": "HTTP_OAI_Parts_Attempt2",
      "name": "OpenAI Parts (Attempt 2)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2540, 320]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.statusCode}}",
              "operation": "smaller",
              "value2": 300
            }
          ]
        }
      },
      "id": "IF_Parts_200_A2",
      "name": "IF: Parts < 300 ? (A2)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2800, 320]
    },
    {
      "parameters": {
        "functionCode": "const res = items[0].json;\ntry {\n  const raw = res.body.choices[0].message.content;\n  const parsed = JSON.parse(raw);\n  if (!Array.isArray(parsed) || parsed.length !== 4) {\n    throw new Error('Expected array of 4 template parts');\n  }\n  return [{ template_parts: parsed }];\n} catch (e) {\n  return [{ parse_error: String(e), raw: res }];\n}"
      },
      "id": "Parse_Parts",
      "name": "Parse Template Parts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2800, 160]
    },
    {
      "parameters": {
        "url": "={{$env.BACKEND_BASE_URL}}/api/v1/repos/scan-result",
        "options": {
          "ignoreResponseCode": true
        },
        "jsonParameters": true,
        "responseFormat": "json",
        "bodyParametersJson": "={\n  \"scan_id\": $json.scan_id,\n  \"summary_markdown\": $json.summary_markdown,\n  \"template_parts\": $json.template_parts\n}"
      },
      "id": "HTTP_Post_Back_Success",
      "name": "POST Back: Success (/scan-result)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3060, 160]
    },
    {
      "parameters": {
        "responseBody": "={\"ok\": true, \"scan_id\": $json.scan_id}",
        "responseCode": 200
      },
      "id": "Respond_Success",
      "name": "Respond 200",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [3320, 160]
    },
    {
      "parameters": {
        "url": "={{$env.BACKEND_BASE_URL}}/api/v1/repos/scans/{{$json.scan_id}}/error",
        "options": {
          "ignoreResponseCode": true
        },
        "jsonParameters": true,
        "responseFormat": "json",
        "bodyParametersJson": "={\n  \"scan_id\": $json.scan_id,\n  \"repo_id\": $json.repo_id,\n  \"error_message\": $json.error_message || 'Unknown error'\n}"
      },
      "id": "HTTP_Post_Back_Error",
      "name": "POST Back: Error (/scans/:id/error)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2060, 540]
    },
    {
      "parameters": {
        "functionCode": "return [{\n  scan_id: $json.scan_id,\n  repo_id: $json.repo_id,\n  error_message: `Clone failed (exitCode=${$json.exitCode}). stderr=${($json.stderr||'').slice(0,500)}`\n}];"
      },
      "id": "Build_Error_Clone",
      "name": "Build Error: Clone",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1240, 540]
    },
    {
      "parameters": {
        "functionCode": "const res = items[0].json;\nreturn [{\n  scan_id: $json.scan_id,\n  repo_id: $json.repo_id,\n  error_message: `Summarize failed. status=${res.statusCode}. body=${JSON.stringify(res.body).slice(0,500)}`\n}];"
      },
      "id": "Build_Error_Summarize",
      "name": "Build Error: Summarize",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2020, 540]
    },
    {
      "parameters": {
        "functionCode": "const res = items[0].json;\nreturn [{\n  scan_id: $json.scan_id,\n  repo_id: $json.repo_id,\n  error_message: `Parts generation failed. status=${res.statusCode}. body=${JSON.stringify(res.body).slice(0,500)}`\n}];"
      },
      "id": "Build_Error_Parts",
      "name": "Build Error: Parts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2800, 540]
    },
    {
      "parameters": {
        "responseBody": "={\"ok\": false, \"scan_id\": $json.scan_id, \"error\": $json.error_message}",
        "responseCode": 500
      },
      "id": "Respond_Error",
      "name": "Respond 500",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2320, 720]
    }
  ],
  "connections": {
    "Webhook: Repo Scan Trigger": {
      "main": [
        [
          { "node": "Set: Context Vars", "type": "main", "index": 0 }
        ]
      ]
    },
    "Set: Context Vars": {
      "main": [
        [
          { "node": "Clone Repo (shallow)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Clone Repo (shallow)": {
      "main": [
        [
          { "node": "IF: Clone OK?", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF: Clone OK?": {
      "main": [
        [
          { "node": "Extract Repo Info", "type": "main", "index": 0 }
        ],
        [
          { "node": "Build Error: Clone", "type": "main", "index": 0 }
        ]
      ]
    },
    "Extract Repo Info": {
      "main": [
        [
          { "node": "OpenAI Summarize (Attempt 1)", "type": "main", "index": 0 }
        ]
      ]
    },
    "OpenAI Summarize (Attempt 1)": {
      "main": [
        [
          { "node": "IF: Summarize < 300 ?", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF: Summarize < 300 ?": {
      "main": [
        [
          { "node": "Extract Summary Markdown", "type": "main", "index": 0 }
        ],
        [
          { "node": "Backoff 1.5s", "type": "main", "index": 0 }
        ]
      ]
    },
    "Backoff 1.5s": {
      "main": [
        [
          { "node": "OpenAI Summarize (Attempt 2)", "type": "main", "index": 0 }
        ]
      ]
    },
    "OpenAI Summarize (Attempt 2)": {
      "main": [
        [
          { "node": "IF: Summarize < 300 ? (A2)", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF: Summarize < 300 ? (A2)": {
      "main": [
        [
          { "node": "Extract Summary Markdown", "type": "main", "index": 0 }
        ],
        [
          { "node": "Build Error: Summarize", "type": "main", "index": 0 }
        ]
      ]
    },
    "Extract Summary Markdown": {
      "main": [
        [
          { "node": "OpenAI Parts (Attempt 1)", "type": "main", "index": 0 }
        ]
      ]
    },
    "OpenAI Parts (Attempt 1)": {
      "main": [
        [
          { "node": "IF: Parts < 300 ?", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF: Parts < 300 ?": {
      "main": [
        [
          { "node": "Parse Template Parts", "type": "main", "index": 0 }
        ],
        [
          { "node": "Backoff 1.5s (Parts)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Backoff 1.5s (Parts)": {
      "main": [
        [
          { "node": "OpenAI Parts (Attempt 2)", "type": "main", "index": 0 }
        ]
      ]
    },
    "OpenAI Parts (Attempt 2)": {
      "main": [
        [
          { "node": "IF: Parts < 300 ? (A2)", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF: Parts < 300 ? (A2)": {
      "main": [
        [
          { "node": "Parse Template Parts", "type": "main", "index": 0 }
        ],
        [
          { "node": "Build Error: Parts", "type": "main", "index": 0 }
        ]
      ]
    },
    "Parse Template Parts": {
      "main": [
        [
          { "node": "POST Back: Success (/scan-result)", "type": "main", "index": 0 }
        ]
      ]
    },
    "POST Back: Success (/scan-result)": {
      "main": [
        [
          { "node": "Respond 200", "type": "main", "index": 0 }
        ]
      ]
    },
    "Build Error: Clone": {
      "main": [
        [
          { "node": "POST Back: Error (/scans/:id/error)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Build Error: Summarize": {
      "main": [
        [
          { "node": "POST Back: Error (/scans/:id/error)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Build Error: Parts": {
      "main": [
        [
          { "node": "POST Back: Error (/scans/:id/error)", "type": "main", "index": 0 }
        ]
      ]
    },
    "POST Back: Error (/scans/:id/error)": {
      "main": [
        [
          { "node": "Respond 500", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "repo-template-generator-http-retry-v2"
}
